name: SQL Server to BigQuery Pipeline

on:
  workflow_dispatch:  # Déclenchement manuel
  schedule:
    - cron: '0 1 * * *'  # Tous les jours à 1h du matin

jobs:
  etl_pipeline:
    runs-on: self-hosted  # Utilise ton runner auto-hébergé (sur ton PC)

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install ODBC Driver
      shell: powershell
      run: |
        $driverName = 'ODBC Driver 17 for SQL Server'
        if (-not (Get-ItemProperty 'HKLM:\SOFTWARE\ODBC\ODBCINST.INI\ODBC Drivers' -Name $driverName -ErrorAction SilentlyContinue)) {
            Write-Host "Installing $driverName..."
            Invoke-WebRequest -Uri 'https://go.microsoft.com/fwlink/?linkid=2202930' -OutFile 'msodbcsql.msi'
            Start-Process msiexec.exe -Wait -ArgumentList '/i msodbcsql.msi /quiet /norestart IACCEPTMSODBCSQLLICENSETERMS=YES'
            Remove-Item msodbcsql.msi
        }

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        

    - name: Create credentials file
      shell: powershell
      run: |
        # Crée le fichier credentials directement à partir du secret
        $json = '${{ secrets.GOOGLE_CREDENTIALS_JSON }}'
        $json | Out-File -FilePath "google-credentials.json" -Encoding utf8
        # Définit la variable d'environnement
        echo "GOOGLE_APPLICATION_CREDENTIALS=$env:GITHUB_WORKSPACE/google-credentials.json" >> $env:GITHUB_ENV

    - name: Set up environment variables
      shell: powershell
      run: |
        echo "SQL_SERVER=${{ secrets.SQL_SERVER }}" >> $env:GITHUB_ENV
        echo "SQL_DATABASE=${{ secrets.SQL_DATABASE }}" >> $env:GITHUB_ENV
        echo "SQL_USERNAME=${{ secrets.SQL_USERNAME }}" >> $env:GITHUB_ENV
        echo "SQL_PASSWORD=${{ secrets.SQL_PASSWORD }}" >> $env:GITHUB_ENV
        echo "SQL_DRIVER=ODBC Driver 17 for SQL Server" >> $env:GITHUB_ENV
        echo "GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}" >> $env:GITHUB_ENV
        echo "BQ_DATASET_ID=${{ secrets.BQ_DATASET_ID }}" >> $env:GITHUB_ENV
        echo "DATA_BASE_PATH=./data" >> $env:GITHUB_ENV
        echo "ODBC_SYS_TRACE=1" >> $env:GITHUB_ENV  # Active le logging ODBC
        echo "ODBC_SYS_TRACEFILE=C:\ODBC.log" >> $env:GITHUB_ENV  # Fichier de log

    - name: Debug environment
      shell: powershell
      run: |
        echo "=== Environment Variables ==="
        echo "SQL_SERVER: $env:SQL_SERVER"
        echo "SQL_DATABASE: $env:SQL_DATABASE"
        echo "GCP_PROJECT_ID: $env:GCP_PROJECT_ID"
        echo "GOOGLE_APPLICATION_CREDENTIALS: $env:GOOGLE_APPLICATION_CREDENTIALS"
        
        echo "`n=== Google Credentials File ==="
        if (Test-Path $env:GOOGLE_APPLICATION_CREDENTIALS) {
            Get-Content $env:GOOGLE_APPLICATION_CREDENTIALS
        } else {
            Write-Host "Credentials file not found!"
        }
        
        echo "`n=== ODBC Drivers ==="
        python -c "import pyodbc; print(pyodbc.drivers())"
    
    - name: Test SQL Connection
      shell: powershell
      run: |
       Write-Host "Testing SQL Server connection..."
       $connectionString = "Driver={ODBC Driver 17 for SQL Server};Server=$env:SQL_SERVER;Database=$env:SQL_DATABASE;UID=$env:SQL_USERNAME;PWD=$env:SQL_PASSWORD;Encrypt=yes;TrustServerCertificate=yes;"
    
       try {
        # Test connection
        $conn = New-Object System.Data.Odbc.OdbcConnection
        $conn.ConnectionString = $connectionString
        $conn.Open()
        Write-Host "Connection successful!"
        $conn.Close()
        } catch {
        Write-Host "Connection failed: $_"
        
        # Check server reachability
        Write-Host "Checking if server is reachable..."
        
        # Extract server name (remove any instance parts)
        $serverName = $env:SQL_SERVER
        if ($serverName -match '([^\\,]+)') {
            $serverName = $matches[1]
        }
        
        # Check if we can ping the server
        if (Test-Connection -ComputerName $serverName -Count 1 -Quiet) {
            Write-Host "Server $serverName is reachable via ping!"
        } else {
            Write-Host "Server $serverName is NOT reachable via ping."
        }
        
        # Check if the port is open (default SQL port is 1433)
        try {
            $tcp = New-Object System.Net.Sockets.TcpClient
            $tcp.ConnectAsync($serverName, 1433).Wait(3000) | Out-Null
            if ($tcp.Connected) {
                Write-Host "Port 1433 on $serverName is open!"
            } else {
                Write-Host "Port 1433 on $serverName is closed or filtered."
            }
            $tcp.Close()
        } catch {
            Write-Host "Error testing port 1433: $_"
          }
        }

    - name: Run ETL pipeline
      shell: powershell
      run: python Script_python/pipeline_GCP.py
