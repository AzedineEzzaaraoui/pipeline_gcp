name: SQL Server to BigQuery Pipeline

on:
  schedule:
    - cron: '0 1 * * *' # Exécuter tous les jours à 1h du matin
  workflow_dispatch: # Lancer manuellement

jobs:
  etl_pipeline:
    runs-on: self-hosted # Utilise un runner local
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Fix pip and install dependencies
        run: |
          python -m ensurepip --upgrade || echo "Ensurepip failed, trying alternative method"
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
        shell: cmd

      - name: Check and install ODBC Driver for SQL Server if needed
        shell: powershell
        run: |
          Write-Host "Checking for ODBC Driver installation..."
          $drivers = Get-ItemProperty 'HKLM:\SOFTWARE\ODBC\ODBCINST.INI\ODBC Drivers' -ErrorAction SilentlyContinue
          if ($drivers.'ODBC Driver 17 for SQL Server') {
            Write-Host "ODBC Driver 17 for SQL Server is already installed."
          } else {
            Write-Host "ODBC Driver 17 for SQL Server not found. Installing..."
            # Exemple de téléchargement et installation silencieuse (adapter si besoin)
            $url = 'https://go.microsoft.com/fwlink/?linkid=2202930'
            $msi = 'msodbcsql.msi'
            Invoke-WebRequest -Uri $url -OutFile $msi
            Start-Process msiexec.exe -ArgumentList "/i $msi /quiet /norestart IACCEPTMSODBCSQLLICENSETERMS=YES" -Wait
            Remove-Item $msi
            Write-Host "Installation terminée."
          }

      - name: Configure Google Cloud credentials
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

      - name: Set up environment variables
        run: |
          echo SQL_SERVER=${{ secrets.SQL_SERVER }} >> $Env:GITHUB_ENV
          echo SQL_DATABASE=${{ secrets.SQL_DATABASE }} >> $Env:GITHUB_ENV
          echo SQL_USERNAME=${{ secrets.SQL_USERNAME }} >> $Env:GITHUB_ENV
          echo SQL_PASSWORD=${{ secrets.SQL_PASSWORD }} >> $Env:GITHUB_ENV
          echo SQL_DRIVER=ODBC Driver 17 for SQL Server >> $Env:GITHUB_ENV
          echo GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }} >> $Env:GITHUB_ENV
          echo BQ_DATASET_ID=${{ secrets.BQ_DATASET_ID }} >> $Env:GITHUB_ENV
          echo DATA_BASE_PATH=./data >> $Env:GITHUB_ENV
          echo GOOGLE_APPLICATION_CREDENTIALS=%CD%\gcp-credentials.json >> $Env:GITHUB_ENV
        shell: powershell

      - name: Create credentials file
        run: |
          $creds = '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'
          Set-Content -Path gcp-credentials.json -Value $creds
        shell: powershell

      - name: Modify connection string in pipeline script
        run: |
          import os
          import re

          print("Modifying connection string in pipeline_GCP.py")
          filename = 'Script_python/pipeline_GCP.py'

          with open(filename, 'r', encoding='utf-8') as file:
              content = file.read()

          conn_func = '''def create_connection():
              """Create a direct pyodbc connection using environment variables"""
              try:
                  server_name = os.getenv('SQL_SERVER')
                  if '\\\\' in server_name:
                      server_name = server_name.replace('\\\\', '\\')

                  print(f"Attempting to connect to: {server_name}")
                  print(f"Using driver: {os.getenv('SQL_DRIVER')}")
                  print(f"Database: {os.getenv('SQL_DATABASE')}")

                  conn_str = (
                      f"DRIVER={{{os.getenv('SQL_DRIVER')}}};"
                      f"SERVER={server_name};"
                      f"DATABASE={os.getenv('SQL_DATABASE')};"
                      f"UID={os.getenv('SQL_USERNAME')};"
                      f"PWD={os.getenv('SQL_PASSWORD')};"
                      f"TrustServerCertificate=yes;"
                  )
                  print(f"Connection string: {conn_str.replace(os.getenv('SQL_PASSWORD'), '********')}")
                  return pyodbc.connect(conn_str)
              except Exception as e:
                  logger.error(f"Error creating connection: {str(e)}")
                  logger.info("Available ODBC drivers:")
                  for driver in pyodbc.drivers():
                      logger.info(f"  - {driver}")
                  raise
          '''

          pattern = r"def create_connection\(\):.*?return pyodbc\.connect\(conn_str\)"
          content = re.sub(pattern, conn_func, content, flags=re.DOTALL)

          if 'DATA_BASE_PATH' in os.environ:
              content = content.replace("base_path = './data'", "base_path = os.environ['DATA_BASE_PATH']")
              content = content.replace("base_path = './data '", "base_path = os.environ['DATA_BASE_PATH']")
              content = content.replace('base_path = "./data"', "base_path = os.environ['DATA_BASE_PATH']")
              content = content.replace('base_path = "./data "', "base_path = os.environ['DATA_BASE_PATH']")

          with open(filename, 'w', encoding='utf-8') as file:
              file.write(content)

          print("Script updated successfully.")
        shell: python

      - name: Debug environment
        run: |
          echo "Current directory: $PWD"
          ls
          ls data
          echo "Checking environment variables:"
          echo "SQL_SERVER=$env:SQL_SERVER"
          echo "SQL_DATABASE=$env:SQL_DATABASE"
          echo "SQL_DRIVER=$env:SQL_DRIVER"
          echo "DATA_BASE_PATH=$env:DATA_BASE_PATH"
          echo "GCP_PROJECT_ID=$env:GCP_PROJECT_ID"
          echo "BQ_DATASET_ID=$env:BQ_DATASET_ID"

          Write-Host "ODBC Drivers installed:"
          Get-ItemProperty 'HKLM:\SOFTWARE\ODBC\ODBCINST.INI\ODBC Drivers' 2>$null | Format-List
        shell: powershell

      - name: Run ETL pipeline
        run: python Script_python/pipeline_GCP.py
        shell: cmd

      - name: Run tests
        run: python Script_python/pytest.py
        shell: cmd
