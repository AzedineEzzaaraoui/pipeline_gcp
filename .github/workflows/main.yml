
name: SQL Server to BigQuery Pipeline
on:
  workflow_dispatch:  # Déclenchement manuel
  schedule:
    - cron: '0 1 * * *'  # Tous les jours à 1h du matin (Fixed cron syntax)
jobs:
  etl_pipeline:
    runs-on: self-hosted  # Utilise ton runner auto-hébergé (sur ton PC)
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Install ODBC Driver
      shell: powershell
      run: |
        $driverName = 'ODBC Driver 17 for SQL Server'
        if (-not (Get-ItemProperty 'HKLM:\SOFTWARE\ODBC\ODBCINST.INI\ODBC Drivers' -Name $driverName -ErrorAction SilentlyContinue)) {
            Write-Host "Installing $driverName..."
            Invoke-WebRequest -Uri 'https://go.microsoft.com/fwlink/?linkid=2202930' -OutFile 'msodbcsql.msi'
            Start-Process msiexec.exe -Wait -ArgumentList '/i msodbcsql.msi /quiet /norestart IACCEPTMSODBCSQLLICENSETERMS=YES'
            Remove-Item msodbcsql.msi
        }
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyodbc pandas google-cloud-bigquery pandas-gbq
        
    - name: Create credentials file
      shell: powershell
      run: |
        # Crée le fichier credentials directement à partir du secret
        $json = '${{ secrets.GOOGLE_CREDENTIALS_JSON }}'
        $json | Out-File -FilePath "google-credentials.json" -Encoding utf8
        # Définit la variable d'environnement
        echo "GOOGLE_APPLICATION_CREDENTIALS=$env:GITHUB_WORKSPACE/google-credentials.json" >> $env:GITHUB_ENV
        
    - name: Set up environment variables
      shell: powershell
      run: |
        echo "SQL_SERVER=${{ secrets.SQL_SERVER }}" >> $env:GITHUB_ENV
        echo "SQL_DATABASE=${{ secrets.SQL_DATABASE }}" >> $env:GITHUB_ENV
        echo "SQL_USERNAME=${{ secrets.SQL_USERNAME }}" >> $env:GITHUB_ENV
        echo "SQL_PASSWORD=${{ secrets.SQL_PASSWORD }}" >> $env:GITHUB_ENV
        echo "SQL_DRIVER=ODBC Driver 17 for SQL Server" >> $env:GITHUB_ENV
        echo "GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}" >> $env:GITHUB_ENV
        echo "BQ_DATASET_ID=${{ secrets.BQ_DATASET_ID }}" >> $env:GITHUB_ENV
        echo "DATA_BASE_PATH=./data" >> $env:GITHUB_ENV
        echo "ODBC_SYS_TRACE=1" >> $env:GITHUB_ENV
        echo "ODBC_SYS_TRACEFILE=$env:GITHUB_WORKSPACE\ODBC.log" >> $env:GITHUB_ENV
    
    - name: Test SQL Connection
      shell: powershell
      run: |
        Write-Host "Testing SQL Server connection..."
        $serverName = $env:SQL_SERVER
        Write-Host "Server name: $serverName"
        
        # Check if SQL Server is reachable
        if ($serverName -match '([^\\,]+)') {
            $baseServerName = $matches[1]
            Write-Host "Base server name: $baseServerName"
            
            try {
                # Test ping
                if (Test-Connection -ComputerName $baseServerName -Count 1 -Quiet) {
                    Write-Host "✅ Server is reachable via ping"
                } else {
                    Write-Host "❌ Server is NOT reachable via ping"
                }
            } catch {
                Write-Host "❌ Ping test failed: $_"
            }
        }
        
        # Try to connect using ODBC
        try {
            $connectionString = "Driver={ODBC Driver 17 for SQL Server};Server=$env:SQL_SERVER;Database=$env:SQL_DATABASE;UID=$env:SQL_USERNAME;PWD=$env:SQL_PASSWORD;Encrypt=yes;TrustServerCertificate=yes;Connection Timeout=30;"
            
            Write-Host "Trying ODBC connection..."
            $conn = New-Object System.Data.Odbc.OdbcConnection
            $conn.ConnectionString = $connectionString
            $conn.Open()
            Write-Host "✅ ODBC Connection successful!"
            $conn.Close()
        } catch {
            Write-Host "❌ ODBC Connection failed: $_"
        }
        
        # Try connecting with SQL client
        try {
            Write-Host "Trying SqlClient connection..."
            $sqlConnection = New-Object System.Data.SqlClient.SqlConnection
            $sqlConnection.ConnectionString = "Server=$env:SQL_SERVER;Database=$env:SQL_DATABASE;User ID=$env:SQL_USERNAME;Password=$env:SQL_PASSWORD;Encrypt=True;TrustServerCertificate=True;Connection Timeout=30;"
            $sqlConnection.Open()
            Write-Host "✅ SqlClient Connection successful!"
            $sqlConnection.Close()
        } catch {
            Write-Host "❌ SqlClient Connection failed: $_"
        }
        
    - name: Debug environment
      shell: powershell
      run: |
        Write-Host "=== Environment Variables ==="
        Write-Host "SQL_SERVER: $env:SQL_SERVER"
        Write-Host "SQL_DATABASE: $env:SQL_DATABASE"
        Write-Host "GCP_PROJECT_ID: $env:GCP_PROJECT_ID"
        Write-Host "GOOGLE_APPLICATION_CREDENTIALS: $env:GOOGLE_APPLICATION_CREDENTIALS"
        
        Write-Host "`n=== Python and ODBC Info ==="
        python --version
        python -c "import pyodbc; print('Available ODBC drivers:', pyodbc.drivers())"
        
        # Check TCP port connection
        $server = $env:SQL_SERVER
        if ($server -match '([^\\,]+)') {
            $serverName = $matches[1]
            $port = 1433
            Write-Host "`nTesting connection to $serverName on port $port..."
            $tcpClient = New-Object System.Net.Sockets.TcpClient
            try {
                $tcpClient.Connect($serverName, $port)
                if ($tcpClient.Connected) {
                    Write-Host "✅ Successfully connected to port $port"
                } else {
                    Write-Host "❌ Failed to connect to port $port"
                }
            } catch {
                Write-Host "❌ Error connecting to port $port: $_"
            } finally {
                $tcpClient.Close()
            }
        }
        
    - name: Run ETL pipeline
      shell: powershell
      run: python Script_python/pipeline_GCP.py
