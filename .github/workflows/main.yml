name: SQL Server to BigQuery Pipeline

on:
  schedule:
    - cron: '0 1 * * *'   # tous les jours à 1h du matin
  workflow_dispatch:       # lancement manuel possible

jobs:
  etl_pipeline:
    runs-on: self-hosted   # runner local (Windows 64-bit recommandé)

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Fix pip and install dependencies
      run: |
        python -m ensurepip --upgrade || echo "Ensurepip failed, trying alternative method"
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt
      shell: cmd

    - name: Configure Google Cloud credentials
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

    - name: Set up environment variables
      run: |
        echo SQL_SERVER=localhost,1433 >> %GITHUB_ENV%
        echo SQL_DATABASE=${{ secrets.SQL_DATABASE }} >> %GITHUB_ENV%
        echo SQL_USERNAME=${{ secrets.SQL_USERNAME }} >> %GITHUB_ENV%
        echo SQL_PASSWORD=${{ secrets.SQL_PASSWORD }} >> %GITHUB_ENV%
        echo SQL_DRIVER=ODBC Driver 17 for SQL Server >> %GITHUB_ENV%
        echo GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }} >> %GITHUB_ENV%
        echo BQ_DATASET_ID=${{ secrets.BQ_DATASET_ID }} >> %GITHUB_ENV%
        echo DATA_BASE_PATH=./data >> %GITHUB_ENV%
      shell: cmd

    - name: Check Python architecture
      run: python -c "import platform; print('Python architecture:', platform.architecture())"
      shell: cmd

    - name: List available ODBC drivers
      run: powershell -Command "Get-OdbcDriver | Format-Table Name, Platform"
      
    - name: Display connection environment variables (without password)
      run: |
        echo SQL_DRIVER=%SQL_DRIVER%
        echo SQL_SERVER=%SQL_SERVER%
        echo SQL_DATABASE=%SQL_DATABASE%
        echo SQL_USERNAME=%SQL_USERNAME%
      shell: cmd

    - name: Show connection string (masked password)
      run: |
        python -c "import os; print(f'Connection string: DRIVER={{os.getenv(\"SQL_DRIVER\")}};SERVER={os.getenv(\"SQL_SERVER\")};DATABASE={os.getenv(\"SQL_DATABASE\")};UID={os.getenv(\"SQL_USERNAME\")};PWD=***hidden***')"
      shell: cmd

    - name: Fix script path issue in pipeline_GCP.py
      run: |
        python -c "
import os
filename = 'Script_python/pipeline_GCP.py'
with open(filename, 'r', encoding='utf-8') as f:
    content = f.read()
content = content.replace('./data ', './data')
if 'DATA_BASE_PATH' in os.environ:
    content = content.replace(\"base_path = './data'\", \"base_path = os.environ['DATA_BASE_PATH']\")
    content = content.replace(\"base_path = './data '\", \"base_path = os.environ['DATA_BASE_PATH']\")
    content = content.replace('base_path = \"./data\"', \"base_path = os.environ['DATA_BASE_PATH']\")
    content = content.replace('base_path = \"./data \"', \"base_path = os.environ['DATA_BASE_PATH']\")
with open(filename, 'w', encoding='utf-8') as f:
    f.write(content)
print('Script updated successfully.')
"
      shell: cmd

    - name: Run ETL pipeline script
      run: python Script_python/pipeline_GCP.py
      shell: cmd

    - name: Run tests
      run: python Script_python/pytest.py
      shell: cmd
